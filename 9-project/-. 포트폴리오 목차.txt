// 기획
1. 주제
2. 사용기술 - 아이콘, 정렬, 이미지크기
3. 동기 및 선정 사유
4. 사례분석 2개 이상
5. 프로세스 흐름도
6. 프로젝트 일정
7. 역할 분배

// 분석 및 설계
1. 요구사항 분석
  - 테스트 케이스
  - 분석 객체 모델(Analysis Object Model)
2. 화면 설계
  - Oven, Balsamiq
  - 최대한 다 넣음
3. 인터페이스 설계
  - 컴포넌트 다이어그램

// 구현
0. 팀프로젝트 아키텍처, 개인영역 아키텍처

1. 프론트엔드: UI 흐름 순서에 맞게 수정
  -> 화면캡처, 기술도식도, 코드조각, 약간설명(1줄)
  1.1 React Hooks
   -> useState, useRef, useEffect
  1.2 Redux
   -> useSelector, useDispatch
   -> Modern React - Redux-Toolkit
  1.3 Axios/AJAX
  1.4 Redux-Saga
  1.5 Next.js Routing(파일기반)
  1.6 Next.js SSR
  1.7 Next.js Image (Lazy Loading)
  1.8 Next.js Link CSR
  1.9 Apexcharts
   -> 어떤 데이터를 시각화했는지
  1.10 Server Sent Events
  1.11 Mutlipart File
   -> Redux -> base64Url
   -> Redux-Saga -> cloudfront url
  1.11 CSS 및 SASS
   -> 애플리케이션 레이아웃 및 기본 스타일
  1.12 Bootstrap 5
   -> SASS 변수값 커스터마이징
   -> 일부는 React-Bootstrap
  1.13 shell-script로 Next.js ec2 배포
   -> 배포흐름도(git pull, install, build, start)
   -> git hub pages

2. 백엔드
  -> 화면캡처, 기술도식도, 코드조각, 약간설명(1줄)
  1.1 REST API 목록
    - Swagger
  1.2 JPA
  1.3 QueryDSL
  1.3 AWS RDS, PostgreSQL
  1.4 Redis Cache
    - 어떤 영역에 넣었는지
  1.5 Redis Session
  1.6 파일처리 S3, Cloudfront
  1.7 Spring Cloud Gateway(API Gateway)
    - routing, authetication
  1.8 Eureka(Service Registry)
    - service discovery
  1.9 Class Diagram(백엔드 클래스 관계도)
    - entity, repository, controller, service
    - 상속도 표현하면 좋음
  1.10 Sequence Diagram(인터페이스 메시지 흐름)
    - 서비스간 인터페이스, 비동기MQ, 동기Feign
    - 본인 클라이언트-서버-DB간 인터페이스
    - 외부시스템 인터페이스, 공공데이터
  1.11 Entity Relation Diagram(테이블 관계도)
    - 필요하면 별도 작성
  1.12 Deployment Diagram
  1.13 shell-script로 Jar ec2 배포
    - 배포흐름도(bootJar, scp, java -jar)


발표회: 
1명 기획내용 -> 개별적으로 분석/설계, 구현 -> 전체 시연
    
  