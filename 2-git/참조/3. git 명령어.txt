-- git 명령어 정리
. git init
: 로컬 초기화하여 저장소 생성

. git status
: 로컬 저장소와 소스코드를 비교하여 변동사항을 보여줌
: untracked files - 로컬 저장소와 연결이 안 된 상태
                      - 새로 생성된 파일

. git add 파일목록
  - git add .(전체파일)
: 작업 중인 소스코드를 스테이징 영역에 올림
: .gitignore에 있는 파일이나 디렉터리는 무시됨

. git commit -m "메시지"
: 로컬 저장소에 스테이징 영역 목록을 반영
: 사용자 정보가 등록되지 않은 경우
git config --global user.email "dataapp2021@gmail.com"
git config --global user.name "KO DAE KEUN"

. git branch
: 작업중인 branch 및 다른 브랜치 목록을 표시
: 브랜치(branch)-가지, 버전관리 작업공간을 분할
: 기본은 master 브랜치

. git log
: git commit 히스토리를 보는 명령어

. git checkout 커밋Id
: 작업공간의 소스코드가 이전 커밋으로 돌아감

. git branch 브랜치명 커밋Id
: 이전 커밋으로 새로운 브랜치를 생성함

. git checkout 브랜치명
: 해당 브랜치로 작업공간 소스코드가 변경

. git remote add 원격저장소이름 원격저장소주소
: 원격 저장소를 추가
: git remote add origin https://github.com/dataapp2021/react-myworkspace.git

. git remote -v
: 원격 저장소 목록 및 URL을 보여줌
: fetch(받아올 곳), push(올릴 곳)

. git push
: 로컬 저장소의 버전파일을 원격 저장소로 보내기
: git push -u origin master
  -> 최초 원격저장소를 추가했을 때
      push할 원격저장소 이름 및 브랜치명을 써줘야함
  -> -u (--set-upstream) 로컬저장소에서 원격 저장소로 
      업로드 허용

// 일반적인 작업 흐름
. git add . -> git commit -m "메시지" -> git push

. git pull
: 원격저장소에서 버전파일을 받고 작업공간에 소스코드 병합
: git fetch + git merge
: 소스코드 충돌이 있을 때는 수동으로 merging을 하고 반영
   git add . -> git commit -m "메시지" -> git push





. git clone 원격 저장소 주소
  : 원격 저장소의 정보로 로컬 저장소 생성