Redux Saga - Redux Middleware 중에서 대표적으로 가장 많이 쓰는 것
: Redux side effect manager
: Redux의 사이드 이펙트 관리자
: Redux의 사이드 이펙트
  -> Redux 상태를 변경하기 이전/이후에 처리해야되는 추가적인 로직(사이드이펙트)
    : Redux 상태변경 이전
      -> 처리중입니다, 뺑글이(spinner), 막대바(progress) 표시
      -> 서버와의 통신(비동기) - 데이터베이스 저장
      -> 로컬스토리지, indexDb와 같은 브라우저 스토리지 처리
      -> 파일처리(비동기)
    : Redux 상태변경 이후 또는 에러
      -> 처리중입니다.... 해제
      -> 에러가 있다면 에러메시지 표시
    
// Redux 상태 Persistence Strategy(영속화 전략)
: 영속화, RAM(휘발성) -> 디스크(비휘발성)

// 웹
1. Redux 상태를 브라우저 저장공간 저장(localstorage, indexedDB)
2. Redux 상태를 서버를 통해서 원격에 있는 데이터베이스에 저장
// 모바일앱
3. Redux 상태를 모바일 장치의 디스크에 저장(asyncStorage)
// PC
4. Redux 상태를 PC 장치의 디스크(File) 또는 내장 데이터베이스(SqlLite) 저장


1. Asynchronous(비동기적인 작업)
ES6 generators make asynchronous flows easy to read, write, and test. Create complex side effects without getting bogged down by the details.
  -> 비동기적인 처리작업의 직렬화(Serialization)
     : 작업의 순서를 보장할 수 있도록함

// Saga Pattern
: 작업(Task, Transaction)의 처리 순서를 보장하기위한 아키텍처
: 예) 작업을 Queue에 넣고 먼저들어온 작업이 다음작업을 실행


// Redux-Saga에서는 es6의 generator를 이용하여 작업을 순차처리할 수 있도록 함
// es-6(promise)
function saveTodo() {
  todoApi.modify(...)
  .then(()=>{
    userApi.add(()=>{
      profileApi.modify(...) 
    })
  })
}


// es-8
async function saveTodo() {
  await todoApi.modify(...)
  await userApi.add(...)
  await profileApi.modify(...)
}


// es-6(generator)
function* saveTodo() {
  ...
  ...
  yield todoApi.modify(...) // yield부분이 오면 일시정지함
  yield userApi.add(...)
  yield profileApi.modify(...)
}

const gen = saveTodo();

let task = task = gen.next() -> yield 첫번째 todoApi.modify(...)

while(true) {
  // Generator작업이 완료되었음
  if(task.done == true || typeof task.value == "undefined") {
    break;
  }

  // Promise가 resolve되었음(API통신이 완료되었음) 
  if(task.value.state == "fullfilled") {
    // 다음작업을 실행
    task = gent.next()  -> 첫번째반복문 yield 두번째 userApi.add(...)
                        -> 두번째반복문 yield 세번째 profileApi.modify(...)
  } else {
    continue;
  }
}